---
//Import relevant dependencies
import ThemeIcon from "@components/ThemeIcon.astro";
import NavLink from "@components/ui/links/NavLink.astro";
import navigation from "@utils/navigation.ts";
import BrandLogo from "@components/BrandLogo.astro";
import AuthNavigation from "@components/AuthNavigation.tsx";
---

{/* Main header component */}
<header
  class="sticky inset-x-0 top-0 z-50 flex w-full flex-wrap text-sm md:flex-nowrap md:justify-start border-b-2 bg-blue-50/100 dark:border-cqDarkPrimary-100/40 dark:bg-cqDarkPrimary-300/100"
>
  {/* Navigation container */}
  <nav class="flex flex-col box-border w-full max-w-7xl mx-auto px-8 sm:px-12 lg:px-16"
    aria-label="Global"
  >
    <div class="flex justify-start items-center flex-wrap lg:flex-nowrap w-full py-2 lg:py-0" >
      <div class="inline-flex items-center w-full lg:w-auto">
        {/* Brand logo */}
        <a
          class="flex-none rounded-lg text-xl font-bold outline-hidden ring-zinc-500 focus-visible:ring dark:ring-zinc-200 dark:focus:outline-hidden"
          href="/"
          aria-label="Brand"
        >
          <BrandLogo class="h-auto w-32 lg:w-44" />
        </a>
        {/* Collapse toggle for smaller screens */}
        <a
          href="/search"
          class="ml-auto lg:hidden flex-initial flex-wrap justify-end items-center text-neutral-600 hover:text-neutral-800 dark:text-neutral-300 dark:hover:text-white p-2 rounded-sm"
        >
          {/* Search icon */}
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M11 5a7 7 0 00-4.95 11.95l-4.34 4.34a1 1 0 101.42 1.42l4.34-4.34A7 7 0 1011 5z"
            />
          </svg>
        </a>
        <div class="lg:hidden flex-initial flex-wrap justify-end items-center">

          <button
            type="button"
            class="hs-collapse-toggle flex h-8 w-8 items-center justify-center rounded-full text-sm font-bold transition duration-300
            disabled:pointer-events-none disabled:opacity-50
            text-neutral-600 hover:bg-neutral-200 dark:text-neutral-400 dark:hover:bg-neutral-700 dark:focus:outline-hidden"
            data-hs-collapse="#navbar-collapse-with-animation"
            aria-controls="navbar-collapse-with-animation"
            aria-label="Toggle navigation"
          >
            <svg
              class="h-[1.25rem] w-[1.25rem] shrink-0 hs-collapse-open:hidden"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <line x1="3" x2="21" y1="6" y2="6"></line>
              <line x1="3" x2="21" y1="12" y2="12"></line>
              <line x1="3" x2="21" y1="18" y2="18"></line>
            </svg>
            <svg
              class="hidden h-[1.25rem] w-[1.25rem] shrink-0 hs-collapse-open:block"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M18 6 6 18"></path>
              <path d="m6 6 12 12"></path>
            </svg>
          </button>
        </div>
        {/* ThemeIcon component specifically for smaller screens */}
        {/*<span class="inline-block lg:hidden">
          <ThemeIcon />
        </span>*/}
      </div>
      {/* Contains navigation links */}
      <div
        id="navbar-collapse-with-animation"
        class="hs-collapse hidden w-full lg:flex flex-wrap grow justify-start lg:h-20 overflow-hidden transition-all duration-300"
      >
        {/* Navigation links container */}
        <div
          class="mt-5 flex flex-col gap-x-0 gap-y-4 lg:mt-0 lg:flex-row lg:items-center justify-start lg:justify-end lg:gap-x-4 lg:gap-y-0 lg:ps-[16px]"
        >
          {/* Add mobile auth navigation at the top */}
          <div class="lg:hidden border-b border-neutral-200 dark:border-neutral-700 pb-4 mb-4">
            <AuthNavigation className="flex items-center space-x-3" client:load />
          </div>
          
          {/* Navigation links component */}
          {
            navigation.getMainNavEntries(Astro.url.pathname, Astro.props.locale).map((navEntry) => (
              <NavLink navEntry={navEntry} />
            ))
          }
        </div>
      </div>
      {/* ThemeIcon component specifically for larger screens */}
      <div class="hidden lg:flex lg:flex-row lg:gap-2 items-center ml-auto">
       {/* <ThemeIcon */}
        <a
          href="/search"
          class="text-neutral-600 hover:text-neutral-800 dark:text-neutral-300 dark:hover:text-white p-2 rounded-sm shrink-0"
        >
          {/* Search icon */}
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M11 5a7 7 0 00-4.95 11.95l-4.34 4.34a1 1 0 101.42 1.42l4.34-4.34A7 7 0 1011 5z"
            />
          </svg>
        </a>
        
        {/* Add the dynamic authentication component */}
        <AuthNavigation client:load />
      </div>
    </div>
  </nav>
</header>

<script is:inline>
  // Simple mobile menu toggle without Preline dependencies
  document.addEventListener('DOMContentLoaded', function() {
    const toggleButton = document.querySelector('[data-hs-collapse="#navbar-collapse-with-animation"]');
    const mobileMenu = document.getElementById('navbar-collapse-with-animation');
    
    if (toggleButton && mobileMenu) {
      toggleButton.addEventListener('click', function() {
        mobileMenu.classList.toggle('hidden');
      });
    }
  });

  const HSThemeAppearance = {
    init() {
      const defaultTheme = "default";
      let theme = localStorage.getItem("hs_theme") || defaultTheme;

      if (document.querySelector("html").classList.contains("dark")) return;
      this.setAppearance(theme);
    },
    _resetStylesOnLoad() {
      const $resetStyles = document.createElement("style");
      $resetStyles.innerText = `*{transition: unset !important;}`;
      $resetStyles.setAttribute("data-hs-appearance-onload-styles", "");
      document.head.appendChild($resetStyles);
      return $resetStyles;
    },
    setAppearance(theme, saveInStore = true, dispatchEvent = true) {
      const $resetStylesEl = this._resetStylesOnLoad();

      if (saveInStore) {
        localStorage.setItem("hs_theme", theme);
      }

      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }

      document.querySelector("html").classList.remove("dark");
      document.querySelector("html").classList.remove("default");
      document.querySelector("html").classList.remove("auto");

      document
        .querySelector("html")
        .classList.add(this.getOriginalAppearance());

      // proxy for starlight
      document.documentElement.dataset.theme = theme;

      setTimeout(() => {
        $resetStylesEl.remove();
      });

      if (dispatchEvent) {
        window.dispatchEvent(
          new CustomEvent("on-hs-appearance-change", { detail: theme }),
        );
      }
    },
    getAppearance() {
      let theme = this.getOriginalAppearance();
      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }
      return theme;
    },
    getOriginalAppearance() {
      const defaultTheme = "default";
      return localStorage.getItem("hs_theme") || defaultTheme;
    },
  };
  HSThemeAppearance.init();

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", () => {
      if (HSThemeAppearance.getOriginalAppearance() === "auto") {
        HSThemeAppearance.setAppearance("auto", false);
      }
    });

  window.addEventListener("load", () => {
    const $clickableThemes = document.querySelectorAll(
      "[data-hs-theme-click-value]",
    );
    const $switchableThemes = document.querySelectorAll(
      "[data-hs-theme-switch]",
    );

    $clickableThemes.forEach(($item) => {
      $item.addEventListener("click", () =>
        HSThemeAppearance.setAppearance(
          $item.getAttribute("data-hs-theme-click-value"),
          true,
          $item,
        ),
      );
    });

    $switchableThemes.forEach(($item) => {
      $item.addEventListener("change", (e) => {
        HSThemeAppearance.setAppearance(e.target.checked ? "dark" : "default");
      });

      $item.checked = HSThemeAppearance.getAppearance() === "dark";
    });

    window.addEventListener("on-hs-appearance-change", (e) => {
      $switchableThemes.forEach(($item) => {
        $item.checked = e.detail === "dark";
      });
    });
  });
</script>
