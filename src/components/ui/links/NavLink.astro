---
import type { NavEntry as NavEntryInterface } from "../../../types";

// Define TypeScript interface for the properties
interface Props {
  navEntry: NavEntryInterface,
}

// Destructure the properties from Astro.props
const { navEntry } = Astro.props;
---

<!--
Re-usable link component for navigation bar. Highlights the active link
by comparing the current URL with the href of each link.
We assign an ID matching the URL for easy reference in our script.
If URL is '/' (home page), assign ID as 'home'
-->
{
  ('submenu' in navEntry && navEntry.submenu) ? (
  <div class="hs-dropdown [--strategy:static] lg:[--strategy:absolute] lg:[--trigger:hover] [--adaptive:none] lg:flex lg:h-full">
    <a type="button"
       class="hs-dropdown-toggle
    flex relative select-none whitespace-nowrap items-center lg:justify-center lg:self-center min-h-9 px-2 text-sm no-underline rounded-md
    dark:text-neutral-300 hover:dark:bg-white/10
    lg:after:absolute lg:after:w-full lg:after:max-w-10 lg:after:h-1 lg:after:top-[calc(50%-3px)] lg:after:left-2/4 lg:after:mx-0 lg:after:-translate-x-2/4 lg:after:translate-y-10 lg:after:content-[''] lg:hover:after:dark:bg-neutral-300
    ">
      {navEntry.label}
      <svg
        class="size-4 hs-dropdown-open:rotate-180"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"><path d="m6 9 6 6 6-6"></path></svg
      >
    </a>

    <div class="hs-dropdown-menu transition-[opacity,margin] duration-[0.1ms] lg:duration-[150ms] hs-dropdown-open:opacity-100 opacity-0 lg:opacity-0
    w-full hidden z-10 top-full start-0 min-w-60 lg:shadow-xl py-2 lg:p-4
    border-b-2 border-blue-50/40 bg-blue-50/100 dark:border-cqDarkPrimary-100/40 dark:bg-cqDarkPrimary-300/100
    before:absolute before:-top-5 before:start-0 before:w-full before:h-5">
      <div class="flex flex-col lg:flex-row justify-start w-full max-w-7xl mx-auto px-4 lg:pl-64 lg:pr-16 gap-4">

        {
          navEntry.submenu.map((submenuEntry) => (
            <!-- BEGIN COLUMN -->
            <div class="flex flex-col mx-1 md:mx-0">
              {(!submenuEntry.href) && (
                <span class="block py-2 px-2 text-sm font-bold dark:focus:outline-none
                text-neutral-600 dark:text-neutral-300
                ">
                  {submenuEntry.label}
                </span>
              )}
              {('submenu' in submenuEntry) && submenuEntry.submenu !== undefined ? submenuEntry.submenu.map((entry) => (

                ('href' in entry) && (
                <a
                  class="flex items-center gap-x-3.5 py-2 px-3 lg:px-2 rounded-lg text-sm focus:outline-none
                  text-gray-800 hover:text-gray-800 focus:text-gray-800
                  dark:text-neutral-300 dark:hover:text-blue-100 dark:focus:text-blue-100"
                  href={entry.href || '#'}>
                  {entry.label}
                </a>
                )
              )) : ''}
            </div>
            <!-- END COLUMN -->
          ))
        }

      </div>
    </div>
  </div>
  ) : (
    (navEntry.href) && (
      <a
        id={navEntry.href === "/" ? "home" : navEntry.href.replace("/", "")}
        href={navEntry.href}
        data-astro-prefetch
        class="
      flex relative select-none whitespace-nowrap items-center lg:justify-center lg:self-center min-h-9 px-2 text-sm no-underline rounded-md
      dark:text-neutral-300 hover:dark:bg-white/10
      lg:after:absolute lg:after:w-full lg:after:max-w-10 lg:after:h-1 lg:after:top-[calc(50%-3px)] lg:after:left-2/4 lg:after:mx-0 lg:after:-translate-x-2/4 lg:after:translate-y-10 lg:after:content-[''] lg:hover:after:dark:bg-neutral-300
      ">{navEntry.label}</a>
    )
  )
 }

<!--Import the necessary Dropdown plugin-->
<!--https://preline.co/plugins/html/dropdown.html-->
<script>
  import "@preline/dropdown/index.js";
</script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    let url = window.location.pathname;
    let urlSegments = url.split("/");
    let navId;

    if (url === "/") {
      navId = "home";
    } else {
      navId = url.replace("/", "");
    }

    let nav = document.getElementById(navId);

    if (nav) {
      let backgroundColorClass: string = "after:dark:bg-pink-500";
      nav.classList.remove(backgroundColorClass);

      nav.classList.add(backgroundColorClass);
      nav.setAttribute("aria-current", "page");
    }
  });
</script>
