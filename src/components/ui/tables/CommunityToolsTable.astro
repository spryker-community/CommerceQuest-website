---
import type { CommunityToolCollection } from "@/types";
import TableSelectFilter from "@components/ui/tables/TableSelectFilter.astro";

interface Props {
  tools: CommunityToolCollection;
}

function getUniqueAttributes(tools: CommunityToolCollection) {
  const creatorNames = new Set<string>();
  const tags = new Set<string>();
  const licenses = new Set<string>();

  for (const tool of tools) {
    if (!tool.creators) {
      continue;
    }
    tool.creators.forEach(creator => creatorNames.add(creator.name));
    (tool.tags || []).forEach(tag => tags.add(tag));
    licenses.add(tool.license);
  }

  return {
    creatorNames: Array.from(creatorNames),
    tags: Array.from(tags),
    licenses: Array.from(licenses),
  };
}

const { tools } = Astro.props;
const { creatorNames, tags, licenses } = getUniqueAttributes(tools);
---

<div class="mx-auto max-w-[85rem] px-4 py-8 sm:px-6 sm:py-16 lg:px-8 lg:py-14 2xl:max-w-full">
  <div class="flex flex-col md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 py-4">

    <div class="relative w-full md:w-1/3">
      <label for="community-tools-table-search" class="sr-only">Search</label>
      <input type="text"
             name="community-tools-table-search"
             id="community-tools-table-search"
             class="py-2 px-3 ps-9 block w-full
             border-gray-200 shadow-sm rounded-lg text-sm
             focus:z-10 focus:border-blue-500 focus:ring-blue-500
             disabled:opacity-50 disabled:pointer-events-none
             dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600"
             placeholder="Search ...">
      <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
        <svg aria-hidden="true" class="w-5 h-5 text-gray-400 dark:text-neutral-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
        </svg>
      </div>
    </div>

    <div class="w-full md:w-auto flex flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0">
      <div class="flex items-center space-x-3 w-full md:w-auto">
        {tags.length > 0 && <TableSelectFilter selectId="community-tools-table-filter-tags" placeholder="Filter by tags..." options={tags} />}
        {licenses.length > 0 && <TableSelectFilter selectId="community-tools-table-filter-licenses" placeholder="Filter by license..." options={licenses} />}
        {creatorNames.length > 0 && <TableSelectFilter selectId="community-tools-table-filter-creatorNames" placeholder="Filter by creator..." options={creatorNames} />}
        <button type="button" id="community-tools-table-clearBtn" class="py-2 px-2 inline-flex items-center gap-x-1 text-sm rounded-lg border border-gray-200 bg-white text-gray-400 hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:text-neutral-500 dark:border-neutral-700 dark:hover:bg-neutral-800">
          <svg class="shrink-0 size-3.5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M18 6 6 18"></path>
            <path d="m6 6 12 12"></path>
          </svg>
          Clear
        </button>
      </div>
    </div>

  </div>
  <div id="community-tools-table-wrapper"
       data-community-tools={JSON.stringify(tools)}
       class="overflow-hidden border border-gray-200 dark:border-gray-700 md:rounded-lg">
  </div>
</div>

<script>
  //import "@preline/select/index.js";
  import HSSelect from "@preline/select/index.js";
  import type {
    CommunityToolCollection,
    CommunityTool,
    CommunityToolCreator,
    CommunityToolLink
  } from "@/types";
  import {
    createColumnHelper,
    getCoreRowModel,
    getSortedRowModel,
    getFilteredRowModel,
    type ColumnDef,
    type RowData,
    type Table,
  } from '@tanstack/table-core'
  import {
    compareAlphanumeric
  } from '@utils/sorting'
  import {
    createVanillaTable,
    flexRender,
  } from '@components/ui/tables/tanstackTableExtender'

  function renderTable<TData extends RowData>(
    tableContainer: HTMLElement,
    table: Table<TData>,
  ): void {
    // Create table elements
    const tableElement = document.createElement('table')
    const theadElement = document.createElement('thead')
    const tbodyElement = document.createElement('tbody')
    const tfootElement = document.createElement('tfoot')

    tableElement.appendChild(theadElement)
    tableElement.appendChild(tbodyElement)
    tableElement.appendChild(tfootElement)

    // Add styling
    tableElement.classList.add('min-w-full', 'divide-y', 'divide-gray-200', 'dark:divide-gray-700');
    theadElement.classList.add('bg-gray-50', 'dark:bg-gray-800', 'text-sm', 'font-normal', 'text-left', 'rtl:text-right', 'text-gray-500', 'dark:text-gray-400');
    tbodyElement.classList.add('bg-white', 'divide-y', 'divide-gray-200', 'dark:divide-gray-700', 'dark:bg-gray-900');

    // Render table headers
    table.getHeaderGroups().forEach((headerGroup) => {
      const tr = document.createElement('tr');

      headerGroup.headers.forEach((header) => {
        const th = document.createElement('th');

        // Style th
        th.classList.add('px-4', 'py-3.5', 'font-normal');

        if (header.column.columnDef.meta?.tdClassList?.length) {
          th.classList.add(...header.column.columnDef.meta.tdClassList);
        }

        th.innerHTML = '';
        if (!header.isPlaceholder) {
          const thDiv = document.createElement('div') as HTMLDivElement;
          let sortIconHtml = '';

          if (header.column.getCanSort()) {
            thDiv.classList.add('group', 'cursor-pointer', 'select-none', 'whitespace-nowrap');
            thDiv.title = header.column.getNextSortingOrder() === 'asc'
              ? 'Sort ascending'
              : header.column.getNextSortingOrder() === 'desc'
                ? 'Sort descending'
                : 'Clear sort';

            sortIconHtml = '<span class="inline-block text-gray-500 dark:text-gray-400 align-text-top duration-200 group-hover:text-white">\n' +
              '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 12" stroke-width="1"\n' +
              'stroke="currentColor" aria-hidden="true" class="h-2 '+ (header.column.getIsSorted() === 'asc' && 'text-white') +'">\n' +
              '<path stroke-linecap="round" stroke-linejoin="round" d="M5.25 9L9 5.25 12.75 9"></path>\n' +
              '</svg>\n' +
              '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 12" stroke-width="1"\n' +
              'stroke="currentColor" aria-hidden="true" class="h-2 '+ (header.column.getIsSorted() === 'desc' && 'text-white') +'">\n' +
              '<path stroke-linecap="round" stroke-linejoin="round" d="M5.25 3L9 6.75 12.75 3"></path>\n' +
              '</svg>\n' +
              '</span>';
          }

          const toggleSortingHandler = header.column.getToggleSortingHandler();
          if (toggleSortingHandler) {
            thDiv.onclick = toggleSortingHandler;
          }

          thDiv.innerHTML = flexRender(header.column.columnDef.header, header.getContext()) + sortIconHtml;
          th.appendChild(thDiv);
        }

        tr.appendChild(th)
      })
      theadElement.appendChild(tr)
    });


    // Render table rows for the current page
    table.getRowModel().rows.forEach((row) => {
      const tr = document.createElement('tr');

      tr.classList.add('hover:bg-gray-50', 'dark:hover:bg-neutral-700', 'font-normal', 'text-left', 'rtl:text-right', 'text-gray-500', 'dark:text-gray-400');

      row.getVisibleCells().forEach((cell) => {
        const td = document.createElement('td')

        // Style td
        td.classList.add('px-4', 'py-4', 'text-sm', 'align-top');
        if (cell.column.columnDef.meta?.tdClassList?.length) {
          td.classList.add(...cell.column.columnDef.meta.tdClassList);
        }

        td.innerHTML = flexRender(cell.column.columnDef.cell, cell.getContext())
        tr.appendChild(td)
      })
      tbodyElement.appendChild(tr)
    })

    // Clear previous content and append new content
    tableContainer.innerHTML = '';
    tableContainer.appendChild(tableElement);
  }

  const tableContainer = document.getElementById(
    'community-tools-table-wrapper'
  ) as HTMLDivElement;

  const communityTools = JSON.parse(tableContainer.dataset.communityTools || '[]') as CommunityToolCollection;
  const columnHelper = createColumnHelper<CommunityTool>();

  const columns: ColumnDef<CommunityTool, any>[] = [
    columnHelper.accessor('title', {
      header: () => 'Name',
      meta: {
        thClassList: ['min-w-72'],
      },
      sortingFn: (rowA, rowB) => {
        return compareAlphanumeric(rowA.original.title.toLowerCase(), rowB.original.title.toLowerCase());
      },
      cell: (props) => {
        const { title, subtitle } = props.row.original;

        return `
          <div>
            <h2 class="font-semibold text-gray-800 dark:text-white ">${title}</h2>
            ${subtitle ? `<p class="text-sm font-normal text-gray-600 dark:text-gray-400">${subtitle}</p>` : ''}
          </div>
        `;
      },
    }),
    columnHelper.accessor('description', {
      header: () => 'About',
      meta: {
        thClassList: ['min-w-96'],
      },
      enableSorting: false,
      cell: (props) => {
        const { description } = props.row.original;

        if (!description) {
          return '';
        }

        return `
          <div class="prose inline py-1 text-sm font-normal rounded-full text-gray-500 gap-x-2 dark:text-gray-400 prose-a:cursor-pointer prose-a:transition-colors prose-a:duration-200 dark:hover:prose-a:text-gray-500 dark:prose-a:text-gray-300 hover:prose-a:text-gray-500 focus:prose-a:outline-none">
            ${description}
          </div>
        `;
      }
    }),
    columnHelper.accessor('license', {
      header: () => 'License',
      filterFn: 'arrIncludesSome',
      cell: (props) => (
        `<div class="flex items-center">
          ${props.getValue()}
        </div>`
      ),
    }),
    columnHelper.accessor('creators', {
      header: () => 'Creator',
      meta: {
        tdClassList: ['min-w-40'],
      },
      filterFn: (row, columnId, filterValue) => {
        const creators: CommunityToolCreator[] = row.getValue(columnId);

        if (filterValue.length === 0) {
          return true;
        }

        if (!creators || creators.length === 0) {
          return false;
        }

        // Check if at least one creator's name matches any of the names in the filterValue
        return creators.some(creator => filterValue.includes(creator.name));
      },
      cell: (props) => {
        const creators: CommunityToolCreator[] = props.getValue();
        const creatorHtml = creators
          .map(
            (creator) =>
              `<a href=${creator.url}  target="_blank" class="cursor-pointer mb-2 last:mb-0 inline-block underline transition-colors duration-200 dark:hover:text-gray-500 dark:text-gray-300 hover:text-gray-500 focus:outline-none">${creator.name}</a>`
          )
          .join('');
        return `<div>${creatorHtml}</div>`;
      },
    }),
    columnHelper.accessor('links', {
      header: () => 'Link',
      enableSorting: false,
      cell: (props) => {
        const links: CommunityToolLink[] = props.getValue();
        const linkHtml = links
          .map(
            (link) =>
              `<a href=${link.url}  target="_blank" class="cursor-pointer mb-2 last:mb-0 inline-block underline transition-colors duration-200 dark:hover:text-gray-500 dark:text-gray-300 hover:text-gray-500 focus:outline-none">${link.label}</a>`
          )
          .join('');
        return `<div>${linkHtml}</div>`;
      },
    })
  ];

  const table = createVanillaTable<CommunityTool>({
    data: communityTools,
    debugTable: false,
    columns: columns,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    state: {
      columnPinning: {},
      pagination: {
        pageIndex: 0,
        pageSize: 20,
      },
      sorting: [
        {
          id: 'title',
          desc: false,
        },
      ],
    },
    onStateChange: () => {
      renderTable(tableContainer, table);
    },
  });

  renderTable(tableContainer, table);

  {/* BEGIN Filter functionality */}
  function setupColumnFilter(columnName: string, elementId: string) {
    const inputElement = document.getElementById(elementId) as HTMLSelectElement;

    if (!inputElement) {
      return;
    }

    inputElement.addEventListener('change', (e: Event) => {
      const target = e.target as HTMLSelectElement;
      const options = target.selectedOptions;
      const values = Array.from(options).map(({ value }) => value);
      table.getColumn(columnName)?.setFilterValue(values);
    });
  }

  // Reuse the function for different columns
  setupColumnFilter('license', 'community-tools-table-filter-licenses');
  setupColumnFilter('tags', 'community-tools-table-filter-tags');
  setupColumnFilter('creators', 'community-tools-table-filter-creatorNames');
  {/* END Filter functionality */}

  {/* BEGIN Search functionality */}
  const searchInput = document.getElementById(
    'community-tools-table-search'
  ) as HTMLInputElement;

  searchInput.addEventListener('change', (e: Event) => {
    const target = e.target as HTMLInputElement;

    table.setGlobalFilter(String(target.value))
  });

  // Handle the 'input' event for live typing
  searchInput.addEventListener('input', () => {
    searchInput.dispatchEvent(new Event('change'));
  });
  {/* END Search functionality */}

  {/* BEGIN Clear button functionality */}
  const clearBtn = document.querySelector('#community-tools-table-clearBtn') as HTMLButtonElement;

  clearBtn.addEventListener('click', () => {
    // Clear select elements
    const ids = [
      '#community-tools-table-filter-tags',
      '#community-tools-table-filter-licenses',
      '#community-tools-table-filter-creatorNames'
    ];

    ids.forEach(id => {
      const instance = HSSelect.getInstance(id, true);

      if (!instance || !("element" in instance) || !instance.element) {
        return;
      }

      const currentValue = instance.element.value;
      const newValue: string[] = [];

      if (JSON.stringify(currentValue) !== JSON.stringify(newValue)) {
        instance.element.setValue([]);
        instance.element.el.dispatchEvent(new Event('change', { bubbles: true }));
      }

    });

    // Clear the search input field
    const searchInput = document.querySelector('#community-tools-table-search') as HTMLInputElement;
    if (searchInput) {
      const currentValue = searchInput.value;
      const newValue = '';

      if (currentValue !== newValue) {
        searchInput.value = newValue;
        searchInput.dispatchEvent(new Event('change', { bubbles: true }));
      }
    }
  });
  {/* END Clear button functionality */}

</script>